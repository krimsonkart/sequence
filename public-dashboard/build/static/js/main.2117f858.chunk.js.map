{"version":3,"sources":["store.js","Home.jsx","Login.jsx","useChat.js","ChatRoom.jsx","useSequence.js","SequenceV2.jsx","App.js","reportWebVitals.js","index.js"],"names":["configureStore","Home","React","useState","roomName","setRoomName","userId","setUserId","userName","setUserName","className","type","placeholder","value","onChange","event","target","to","connect","payload","onClick","props","state","MSG_HEADERS","NEW_GAME","PLAY_CONFIRM","START_GAME","PLAYER_INACTIVE","LOGGED_IN","CHAT_MESSAGE","BROADCAST_PLAYER_JOINED","BROADCAST_PLAYER_REJOINED","BROADCAST_PLAYER_DROPPED","BROADCAST_PLACE_COIN","BROADCAST_REMOVE_COIN","BROADCAST_REPLACE_CARD","useChat","gameId","playerId","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","query","Object","values","forEach","header","on","message","incomingMessage","body","JSON","stringify","msg","ownedByCurrentUser","senderId","id","disconnect","sendMessage","tokenIndex","indexOf","emit","substr","parse","ChatRoom","match","params","newMessage","setNewMessage","map","i","useSequence","alert","useAlert","globalBoard","board","suits","suiteNumbers","S","D","C","reverse","H","sIndex","vIndex","rIndex","cIndex","direction","loop","_","set","s","v","initializeBoard","position","setPosition","turn","setTurn","setBoard","hand","setHand","players","setPlayers","history","setHistory","errors","setErrorsList","setCompleteBoard","confirmPlayAction","setPlayersList","currentPosition","findIndex","p","playerUpdate","undefined","coinAction","startGame","err","console","log","show","setErrors","errs","setTimeout","filter","time","Date","now","placeAction","card","replaceCard","action","TEAM_COINS","0","1","2","getImagePath","index","imagePath","SINGLE_EYED_JACKS","DOUBLE_EYED_JACKS","Sequence","cardToUse","setCardToUse","selectedCardIndex","setSelectedCardIndex","modalIsOpen","setIsOpen","handlePlaceCard","j","cardIndex","includes","isDoubleEyedJack","cardSelected","closeModal","Container","isOpen","onRequestClose","contentLabel","Row","Col","fluid","row","coin","selectedPositions","getTeamCoin","Card","Img","alt","img-border-primary","src","process","style","justifyContent","padding","height","class","selectedByIndex","handleHandCardSelected","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","options","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","root","template","AlertTemplate","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2117f858.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n// import rotateReducer from \"reducers/rotateReducer\";\n\nfunction configureStore(state = { rotating: true }) {\n    // return createStore(rotateReducer,state);\n}\n\nexport default configureStore;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n    const [roomName, setRoomName] = React.useState(\"\");\n    const [userId, setUserId] = React.useState(\"\");\n    const [userName, setUserName] = React.useState(\"\");\n\n    const handleRoomNameChange = (event) => {\n        setRoomName(event.target.value);\n    };\n\n    const handleUserIdChange = (event) => {\n        setUserId(event.target.value);\n    };\n\n    const handleUserNameChange = (event) => {\n        setUserName(event.target.value);\n    };\n\n    return (\n        <div className=\"home-container\">\n            <input\n                type=\"text\"\n                placeholder=\"Room\"\n                value={roomName}\n                onChange={handleRoomNameChange}\n                className=\"text-input-field\"\n            />\n            <input\n                type=\"text\"\n                placeholder=\"User ID\"\n                value={userId}\n                onChange={handleUserIdChange}\n                className=\"text-input-field\"\n            />\n            <input\n                type=\"text\"\n                placeholder=\"User Name\"\n                value={userName}\n                onChange={handleUserNameChange}\n                className=\"text-input-field\"\n            />\n            <Link to={`/${userId}/${roomName}`} className=\"enter-room-button\">\n                Join room\n            </Link>\n        </div>\n    );\n};\n\nexport default Home;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./Home.css\";\n\nconst Login = () => {\n  const [userId, setUserId] = React.useState(\"\");\n  const [userName, setUserName] = React.useState(\"\");\n\n  const handleUserIdChange = (event) => {\n    setUserId(event.target.value);\n  };\n\n  const handleUserNameChange = (event) => {\n    setUserName(event.target.value);\n  };\n  const handleLogin = () => {\n    this.props.setUserId(this.state.userName);\n    this.props.setUserName(this.state.userName);\n  };\n  return (\n    <div className=\"home-container\">\n      <input\n        type=\"text\"\n        placeholder=\"User ID\"\n        value={userId}\n        onChange={handleUserIdChange}\n        className=\"text-input-field\"\n      />\n      <input\n        type=\"text\"\n        placeholder=\"User Name\"\n        value={userName}\n        onChange={handleUserNameChange}\n        className=\"text-input-field\"\n      />\n      <button className=\"add-todo\" onClick={handleLogin}>\n        Login\n      </button>\n      <Link to={`/rooms`} className=\"enter-room-button\">\n        Join room\n      </Link>\n    </div>\n  );\n};\n\nconst setUserId = (userId) => ({\n  type: \"userId\",\n  payload: {\n    userId,\n  },\n});\nconst setUserName = (userName) => ({\n  type: \"userName\",\n  payload: {\n    userName,\n  },\n});\n\nexport default connect(null, { setUserId, setUserName })(Login);\n","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"http://localhost:8081\";\nconst MSG_HEADERS = {\n  NEW_GAME: 'gameCreated',\n  PLAY_CONFIRM: 'playConfirm',\n  // PLAYER_RECONNECTED: 'player_reconnected',\n  START_GAME: 'start',\n  PLAYER_INACTIVE: 'playerInactive',\n  LOGGED_IN: 'userLoggedIn',\n  CHAT_MESSAGE: 'newChatMessage',\n  BROADCAST_PLAYER_JOINED: 'playerJoined',\n  BROADCAST_PLAYER_REJOINED: 'playerRejoined',\n  BROADCAST_PLAYER_DROPPED: 'playerDropped',\n  BROADCAST_PLACE_COIN: 'placeCoin',\n  BROADCAST_REMOVE_COIN: 'removeCoin',\n  BROADCAST_REPLACE_CARD: 'replaceCard',\n};\n\nconst useChat = (gameId, playerId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  useEffect(() => {\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { playerId, gameId: gameId },\n    });\n    Object.values(MSG_HEADERS).forEach((header) => {\n      socketRef.current.on(header,(message) => {\n        const incomingMessage = {\n          body: JSON.stringify({msg: header, body: JSON.stringify(message)}),\n          ownedByCurrentUser: false,\n        };\n        setMessages((messages) => [...messages, incomingMessage]);\n      })\n    });\n    // Listens for incoming messages\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(\"error\", (message) => {\n      const incomingMessage = {\n        body: JSON.stringify(message),\n        ownedByCurrentUser: true,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [gameId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (message) => {\n    let tokenIndex = message.indexOf(\" \");\n    socketRef.current.emit(\n      message.substr(0, tokenIndex),\n      JSON.parse(message.substr(tokenIndex + 1))\n    );\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n","import React from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"./useChat\";\n\nconst ChatRoom = (props) => {\n    const { gameId, playerId } = props.match.params; // Gets gameId from URL\n    const { messages, sendMessage } = useChat(gameId,playerId); // Creates a websocket and manages messaging\n    const [newMessage, setNewMessage] = React.useState(\"\"); // Message to be sent\n\n    const handleNewMessageChange = (event) => {\n        setNewMessage(event.target.value);\n    };\n\n    const handleSendMessage = () => {\n        sendMessage(newMessage);\n        setNewMessage(\"\");\n    };\n\n    return (\n        <div className=\"chat-room-container\">\n            <h1 className=\"room-name\">Room: {gameId}</h1>\n            <div className=\"messages-container\">\n                <ol className=\"messages-list\">\n                    {messages.map((message, i) => (\n                        <li\n                            key={i}\n                            className={`message-item ${\n                                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n                            }`}\n                        >\n                            {message.body}\n                        </li>\n                    ))}\n                </ol>\n            </div>\n            <textarea\n                value={newMessage}\n                onChange={handleNewMessageChange}\n                placeholder=\"Write message...\"\n                className=\"new-message-input-field\"\n            />\n            <button onClick={handleSendMessage} className=\"send-message-button\">\n                Send\n            </button>\n        </div>\n    );\n};\n\nexport default ChatRoom;","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport _ from \"lodash\";\nimport { useAlert } from 'react-alert'\n\nconst SOCKET_SERVER_URL = \"https://evening-lowlands-19146.herokuapp.com/\";\nconst MSG_HEADERS = {\n  NEW_GAME: \"gameCreated\",\n  PLAY_CONFIRM: \"playConfirm\",\n  PLAYER_RECONNECTED: \"player_reconnected\",\n  START_GAME: \"start\",\n  PLAYER_INACTIVE: \"playerInactive\",\n  LOGGED_IN: \"userLoggedIn\",\n  CHAT_MESSAGE: \"newChatMessage\",\n  BROADCAST_WIN_ACTION: \"broadcastWin\",\n  PLAYER_WIN_ACTION: \"playerWin\",\n  BROADCAST_PLAYER_INACTIVE: \"playerInactive\",\n  BROADCAST_PLAYER_JOINED: \"playerJoined\",\n  BROADCAST_PLAYER_REJOINED: \"playerRejoined\",\n  BROADCAST_PLAYER_DROPPED: \"playerDropped\",\n  BROADCAST_COIN_ACTION: \"coinAction\",\n  BROADCAST_PLACE_COIN: \"placeCoin\",\n  BROADCAST_REMOVE_COIN: \"removeCoin\",\n  BROADCAST_REPLACE_CARD: \"replaceCard\",\n};\n\nfunction initializeBoard() {\n  const board = [];\n  for (let i = 0; i < 10; i++) {\n    board[i] = [];\n  }\n  let suits = [\"S\", \"D\", \"C\", \"H\"];\n  let suiteNumbers = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"0\",\n    \"Q\",\n    \"K\",\n    \"A\",\n  ];\n  let values = {\n    S: suiteNumbers,\n    D: suiteNumbers,\n    C: [...suiteNumbers].reverse(),\n    H: [...suiteNumbers].reverse(),\n  };\n  let sIndex = 0;\n  let vIndex = 0;\n  let rIndex = 0;\n  let cIndex = 1;\n  let direction = 0;\n  let loop = 0;\n  _.set(board, [0, 0], \"*\");\n  _.set(board, [9, 9], \"*\");\n  _.set(board, [0, 9], \"*\");\n  _.set(board, [9, 0], \"*\");\n  for (let i = 0; i < 100; i++) {\n    if (!board[rIndex][cIndex]) {\n      let s = suits[sIndex];\n      let v = values[s][vIndex];\n      if (vIndex === 11) {\n        sIndex = (sIndex + 1) % 4;\n      }\n      vIndex = (vIndex + 1) % 12;\n      _.set(board, [rIndex, cIndex], `${v}${s}`);\n    }\n    switch (direction) {\n      case 0:\n        if (cIndex === 9 - loop) {\n          rIndex++;\n          direction++;\n        } else {\n          cIndex++;\n        }\n        break;\n      case 1:\n        if (rIndex === 9 - loop) {\n          direction++;\n          cIndex--;\n        } else {\n          rIndex++;\n        }\n        break;\n      case 2:\n        if (cIndex === loop) {\n          rIndex--;\n          direction++;\n          loop++;\n        } else {\n          cIndex--;\n        }\n        break;\n      case 3:\n        if (rIndex === loop) {\n          cIndex++;\n          direction = 0;\n        } else {\n          rIndex--;\n        }\n        break;\n    }\n  }\n  return board;\n}\nconst useSequence = (gameId, playerId) => {\n  const alert = useAlert()\n  const globalBoard = initializeBoard();\n  const [position, setPosition] = useState(0); // Sent and received messages\n  const [turn, setTurn] = useState(0); // Sent and received messages\n  const [board, setBoard] = useState([]); // Sent and received messages\n  const [hand, setHand] = useState([]); // Sent and received messages\n  const [players, setPlayers] = useState([]); // Sent and received messages\n  const [history, setHistory] = useState([]); // Sent and received messages\n  const [errors, setErrorsList] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  function setErrors(errs) {\n    setErrorsList(errs);\n    setTimeout(() => {\n      setErrorsList((errors||[]).filter(({ time }) => Date.now() - time < 3000));\n    }, 3000);\n  }\n\n  function setCompleteBoard(board) {\n    setBoard({ globalBoard, board });\n  }\n\n  function confirmPlayAction({ hand, turn }) {\n    setHand(hand);\n  }\n\n  function setPlayersList(players) {\n    setPlayers(players);\n    let currentPosition = players.findIndex((p) => p.playerId === playerId);\n    if (currentPosition) {\n      setPosition(currentPosition);\n    }\n  }\n\n  function playerUpdate({ players, history, turn }) {\n    if (turn !== undefined) {\n      setTurn(turn);\n    }\n    setHistory(history);\n    setPlayersList(players);\n  }\n\n  function coinAction({ turn, history, board }) {\n    setTurn(turn);\n    setCompleteBoard(board);\n    setHistory(history);\n  }\n\n  function startGame({ board, hand, players, history, turn }) {\n    setCompleteBoard(board);\n    setHistory(history);\n    setHand(hand);\n    setTurn(turn);\n    setPlayersList(players);\n  }\n\n  useEffect(() => {\n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { playerId, gameId },\n    });\n    // Listens for incoming messages\n    socketRef.current.on(MSG_HEADERS.START_GAME, startGame);\n    socketRef.current.on(MSG_HEADERS.PLAYER_RECONNECTED, startGame);\n    socketRef.current.on(MSG_HEADERS.PLAY_CONFIRM, confirmPlayAction);\n    socketRef.current.on(MSG_HEADERS.BROADCAST_COIN_ACTION, coinAction);\n    socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_JOINED, playerUpdate);\n    socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_REJOINED, playerUpdate);\n    socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_INACTIVE, playerUpdate);\n\n    socketRef.current.on(\"error\", ({ err }) => {\n      console.log(`Error: ${err}`);\n      alert.show(err);\n    });\n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [gameId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const placeAction = (card, position) => {\n    socketRef.current.emit(\"play\", { card, position });\n  };\n  const replaceCard = (card) => {\n    socketRef.current.emit(\"play\", { card, action: \"replace\" });\n  };\n  return {\n    board,\n    hand,setHand,\n    players,\n    errors,\n    setErrors,\n    history,\n    turn,\n    position,\n    placeAction,\n    replaceCard,\n  };\n};\n\nexport default useSequence;\n","import { View, Mask, MDBAlert } from \"mdbreact\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport {\n  Container,\n  Row,\n  Col,\n  Media,\n  Card,\n  CardImg,\n  Alert,\n} from \"react-bootstrap\";\nimport { useAlert } from \"react-alert\";\nimport Modal from \"react-modal\";\n\nimport \"./Sequence.css\";\nimport useSequence from \"./useSequence\";\nconst TEAM_COINS = { 0: \"red.png\", 1: \"green.png\", 2: \"blue.png\" };\nfunction getImagePath(index) {\n  let imagePath = `${index}.png`;\n  // For ad blocker\n  if (imagePath === \"AD.png\") imagePath = \"aceDiamonds.png\";\n  if (imagePath === \"*.png\") imagePath = \"back2x.png\";\n  return imagePath;\n}\nconst SINGLE_EYED_JACKS = [\"JS\", \"JH\"];\nconst DOUBLE_EYED_JACKS = [\"JD\", \"JC\"];\nfunction isDoubleEyedJack(cardIndex) {\n  return DOUBLE_EYED_JACKS.includes(cardIndex);\n}\nfunction isSingleEyedJack(cardIndex) {\n  return SINGLE_EYED_JACKS.includes(cardIndex);\n}\n\nconst Sequence = (props) => {\n  const alert = useAlert();\n  const { gameId, playerId } = props.match.params; // Gets roomId from URL\n  const {\n    board,\n    hand,\n    setHand,\n    players,\n    position,\n    errors,\n    setErrors,\n    history,\n    turn,\n    placeAction,\n    globalBoard,\n    replaceCard,\n  } = useSequence(gameId, playerId); // Creates a websocket and manages messaging\n  const [cardToUse, setCardToUse] = React.useState(\"\"); // Message to be sent\n  const [selectedCardIndex, setSelectedCardIndex] = React.useState(\"\"); // Message to be sent\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  const handleHandCardSelected = (card, i) => {\n    setCardToUse(card);\n    setSelectedCardIndex(i);\n    if (board.board.selectedByIndex[card] > 1) {\n      setIsOpen(true);\n    }\n    setHand(hand);\n  };\n  function getTeamCoin(board, i, j) {\n    let coin = board && board.selectedPositions[`${i}-${j}`];\n    return (\n      coin !== undefined &&\n      coin !== \"*\" &&\n      process.env.PUBLIC_URL + \"/img/coins/\" + TEAM_COINS[coin]\n    );\n  }\n\n  const handlePlaceCard = (i, j, card) => {\n    if (position !== turn) {\n      console.log(`Not your turn`);\n      alert.show(`Not your turn`);\n      // setErrors((errors) => [...errors, { err:`Not Your Turn`, time: Date.now() }]);\n      return;\n    }\n    if (!cardToUse) {\n      console.log(`No Card Selected`);\n      alert.show(`No Card Selected`);\n      // setErrors((errors) => [...errors, { err:`No Card Selected`, time: Date.now() }]);\n      return;\n    }\n    if (\n      !isSingleEyedJack(cardToUse) &&\n      !isDoubleEyedJack(cardToUse) &&\n      cardToUse !== card\n    ) {\n      console.log(`Not the selected card`);\n      alert.show(`Not the selected card`);\n      // setErrors((errors) => [...errors, { err:`Not the selected card`, time: Date.now() }]);\n      return;\n    }\n    placeAction(cardToUse, `${i}-${j}`);\n    setCardToUse(null);\n  };\n\n  function getBoardToDraw() {\n    return board.globalBoard || [];\n  }\n\n  function cardSelected(i) {\n    return selectedCardIndex === i;\n  }\n  function closeModal() {\n    setIsOpen(false);\n  }\n  function replaceSelected() {\n    replaceCard(cardToUse);\n    setIsOpen(false);\n  }\n  return (\n    <Container>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Example Modal\"\n      >\n        <h2>Replace card?</h2>\n        <button onClick={replaceSelected}>yes</button>\n        <button onClick={closeModal}>no</button>\n      </Modal>\n      <Row>\n        <Col>\n          <span>Turn: {turn}</span>\n        </Col>\n        <Col>\n          <span>Position: {position}</span>\n        </Col>\n        <Col>\n          <span>Selected: {cardToUse}</span>\n        </Col>\n      </Row>\n      <Row>\n        <Container fluid className=\"container\">\n          {getBoardToDraw().map((row, i) => (\n            <Row key={`row${i}`}>\n              {row.map((card, j) => {\n                const coin = getTeamCoin(board.board, i, j);\n                return (\n                  <Col>\n                    <Card onClick={() => handlePlaceCard(i, j, card)}>\n                      <Card.Img\n                        alt=\"Card\"\n                        img-border-primary\n                        src={`${process.env.PUBLIC_URL}/img/${getImagePath(\n                          card\n                        )}`}\n                      />\n                      {coin && (\n                        <img src={coin} className=\"coin img-responsive\" />\n                      )}\n                    </Card>\n                  </Col>\n                );\n              })}\n            </Row>\n          ))}\n        </Container>\n      </Row>\n      <Row>\n        <Container fluid>\n          <Row style={{ justifyContent: \"center\", padding: \"20px\" }}>\n            {(hand || []).map((card, i) => (\n              <Col>\n                <img\n                  alt=\"Card1\"\n                  height=\"100vh\"\n                  src={`${process.env.PUBLIC_URL}/img/${getImagePath(card)}`}\n                  class={cardSelected(i) ? \"border border-primary\" : \"\"}\n                  onClick={() => handleHandCardSelected(card, i)}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Sequence;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport ChatRoom from \"./ChatRoom\";\nimport Sequence from \"./SequenceV2\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/rooms\" component={Home} />\n                <Route exact path=\"/:playerId/:gameId\" component={Sequence} />\n                <Route exact path=\"/chat/:playerId/:gameId\" component={ChatRoom} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: \"30px\",\n  // you can also just use 'scale'\n  transition: transitions.SCALE,\n};\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\nlet root = (\n  <AlertProvider template={AlertTemplate} {...options}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </AlertProvider>\n);\nReactDOM.render(root, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}