{"version":3,"sources":["useLogin.js","redux/actions/actionTypes.js","redux/reducers/user.js","Login.jsx","Home.jsx","CreateGame.jsx","useChat.js","ChatRoom.jsx","useSequence.js","SequenceV2.jsx","App.js","utils/index.js","reportWebVitals.js","redux/reducers/user-reducer.js","redux/store/index.js","index.js"],"names":["useLogin","useState","window","localStorage","getItem","userEmail","setUserEmail","userName","setUserName","userId","setUserId","Types","ActionCreators","user","type","payload","connect","state","clientId","buttonText","onSuccess","response","name","profileObj","console","log","email","setItem","isSignedIn","cookiePolicy","Home","games","setGames","gamesLoaded","setGamesLoaded","roomName","setRoomName","useEffect","a","fetch","process","resp","json","jsonData","data","getData","Container","fluid","Row","style","paddingLeft","paddingRight","paddingTop","paddingBottom","Col","placeholder","value","onChange","event","target","Button","href","map","game","id","setName","numPlayers","setNumPlayers","numTeams","setNumTeams","history","useHistory","e","onClick","adminUser","headers","Accept","method","body","JSON","stringify","then","push","gameId","MSG_HEADERS","NEW_GAME","PLAY_CONFIRM","START_GAME","PLAYER_INACTIVE","LOGGED_IN","CHAT_MESSAGE","BROADCAST_PLAYER_JOINED","BROADCAST_PLAYER_REJOINED","BROADCAST_PLAYER_DROPPED","BROADCAST_PLACE_COIN","BROADCAST_REMOVE_COIN","BROADCAST_REPLACE_CARD","useChat","messages","setMessages","socketRef","useRef","current","socketIOClient","query","playerId","Object","values","forEach","header","on","message","incomingMessage","msg","ownedByCurrentUser","senderId","disconnect","sendMessage","tokenIndex","indexOf","emit","substr","parse","ChatRoom","props","React","newMessage","setNewMessage","className","i","useSequence","setGameComplete","setPlayersModalOpen","alert","useAlert","globalBoard","board","suits","suiteNumbers","S","D","C","reverse","H","sIndex","vIndex","rIndex","cIndex","direction","loop","_","set","s","v","initializeBoard","position","setPosition","turn","setTurn","gameState","setGameState","setBoard","hand","setHand","players","setPlayers","setHistory","errors","setErrorsList","gameLoaded","setGameLoaded","setCompleteBoard","undefined","winner","confirmPlayAction","setPlayersList","currentPosition","findIndex","p","playerUpdate","coinAction","startGameAcknowledge","createSocket","err","show","playerJoined","find","setErrors","errs","setTimeout","filter","time","Date","now","placeAction","card","replaceCard","action","joinGame","startGame","TEAM_COINS","0","1","2","getImagePath","index","imagePath","SINGLE_EYED_JACKS","DOUBLE_EYED_JACKS","Sequence","gameComplete","cardToUse","setCardToUse","selectedCardIndex","setSelectedCardIndex","isReplaceCardModalOpen","setIsReplaceModalOpen","isPlayersModalOpen","match","params","handlePlaceCard","j","cardIndex","includes","isDoubleEyedJack","cardSelected","closeReplaceCardModal","replaceSelected","Modal","Header","Body","get","onHide","closeButton","Title","keys","Array","row","inactive","x","variant","coin","selectedPositions","getTeamCoin","Card","Img","alt","img-border-primary","src","justifyContent","padding","height","selectedByIndex","handleHandCardSelected","Spinner","animation","role","App","getStore","this","dispatch","exact","path","component","CreateGame","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","profile","reducer","rootReducer","combineReducers","userReducer","store","createStore","compose","applyMiddleware","thunk","configureStore","options","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","root","template","AlertTemplate","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcecc8c3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useLogin = () => {\n    const [userEmail, setUserEmail] = useState(window.localStorage.getItem('userEmail'));\n    const [userName, setUserName] = useState(window.localStorage.getItem('userName'));\n    const [userId, setUserId] = useState(window.localStorage.getItem('userId'));\n    return { userEmail, setUserEmail, userName, userId, setUserName, setUserId };\n};\n\nexport default useLogin;\n","export const Types = {\n    LOGIN: 'LOGIN',\n}","import { Types } from '../actions/actionTypes';\n\nexport const ActionCreators = {\n    login: (user) => ({ type: Types.LOGIN, payload: { user } })\n}","import useLogin from './useLogin';\nimport GoogleLogin from 'react-google-login';\nimport { ActionCreators } from './redux/reducers/user';\nimport { connect } from 'react-redux';\nimport React from 'react';\n\nconst Login = () => {\n    // const [user, setUser] = useState(''); // Sent and received messages\n    const { userEmail, setUserEmail, userName, setUserName, setUserId } = useLogin();\n    function responseGoogle(response) {\n        let name = response.profileObj.name;\n        console.log(`Logged in with google`);\n        let email = response.profileObj.email;\n        setUserId(email);\n        // setUserEmail(email);\n        setUserName(name);\n        window.localStorage.setItem('userEmail', email);\n        window.localStorage.setItem('userName', name);\n        window.localStorage.setItem('userId', email);\n        // this.props.dispatch(ActionCreators.login(userObj));\n    }\n    function userNotSet() {\n        // return this.props.user\n        return !userEmail;\n    }\n\n    return userNotSet() ? (\n        <GoogleLogin\n            clientId=\"927228406323-fdhfbqgcto7opgu54u1h7qk3p6754iq8.apps.googleusercontent.com\"\n            buttonText=\"Login\"\n            onSuccess={responseGoogle}\n            isSignedIn={true}\n            cookiePolicy={'single_host_origin'}\n        />\n    ) : (\n        <span>{userName}</span>\n    );\n};\nconst mapStateToProps = state => {\n    return {\n        user: state.user,\n    };\n};\nexport default connect(mapStateToProps)(Login);\n","import './Home.css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport useLogin from './useLogin';\nimport Login from './Login';\nconst SOCKET_SERVER_URL = process.env.REACT_APP_SOCKET_SERVER_URL;\n\nconst Home = () => {\n    const [games, setGames] = useState([]);\n    const [gamesLoaded, setGamesLoaded] = useState(false);\n    const [roomName, setRoomName] = useState('');\n    const { userName } = useLogin();\n\n    const handleRoomNameChange = event => {\n        setRoomName(event.target.value);\n    };\n\n    function userSet() {\n        return !!userName;\n    }\n    useEffect(() => {\n        async function getData() {\n            const resp = await fetch(`${SOCKET_SERVER_URL}api/sequence/games`);\n            setGamesLoaded(true);\n            let jsonData = await resp.json();\n            setGames(jsonData.data);\n        }\n        !gamesLoaded && getData();\n    });\n    // const fetchData = async () => {\n    //     const response = await axios.get(`${SOCKET_SERVER_URL}/games`);\n    //     setGames(response.data);\n    // };\n\n    return userSet() ? (\n        <Container fluid>\n            <Row style={{ paddingLeft: 0, paddingRight: 0, paddingTop: 10, paddingBottom: 10 }}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <input type=\"text\" placeholder=\"Room\" value={roomName} onChange={handleRoomNameChange} />\n                        </Col>\n                        <Col>\n                            <Button href={`/ui/sequence/game/${roomName}`}>Join Game</Button>\n                        </Col>\n                        <Col>\n                            <Button href=\"/ui/sequence/create\">Create</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Row>\n            <Row>\n                <Container>\n                    {games.map(game => (\n                        <Row style={{ paddingLeft: 0, paddingRight: 0, paddingTop: 10, paddingBottom: 10 }}>\n                            <Col>{game.id}</Col>\n                            <Col>\n                                <Button href={`/ui/sequence/game/${game.id}`}>Join Game</Button>\n                            </Col>\n                        </Row>\n                    ))}\n                </Container>\n            </Row>\n        </Container>\n    ) : (\n        <Login />\n    );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport './Home.css';\nimport axios from 'axios';\nimport { Button, Form, Container, Row, Col, FormLabel, FormCheck } from 'react-bootstrap';\nimport useLogin from './useLogin';\nimport Login from './Login';\nconst SOCKET_SERVER_URL = process.env.REACT_APP_SOCKET_SERVER_URL;\n\nconst Home = () => {\n    const { userName, userId } = useLogin();\n    const [name, setName] = useState('');\n    const [numPlayers, setNumPlayers] = useState('2');\n    const [numTeams, setNumTeams] = useState('2');\n    let history = useHistory();\n    function userSet() {\n        return !!userName;\n    }\n\n    const handleSubmit1 = event => {\n        const form = event.currentTarget;\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(`Posting request`);\n        axios\n            .post(\n                `${SOCKET_SERVER_URL}api/sequence/game`,\n                { game: { ...form, adminUser: userId } },\n                { headers: { Accept: 'application/json' } }\n            )\n            .then(response => {\n                const { gameId } = response;\n                history.push(`/ui/sequence/${gameId}`);\n            })\n            .catch(error => {});\n    };\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        // console.log(JSON.stringify(event.currentTarget));\n        const data = new FormData(event.target);\n        console.log(JSON.stringify(data));\n\n        fetch(`${SOCKET_SERVER_URL}api/sequence/game`, {\n            method: 'POST',\n            body: data,\n        })\n            .then(resp => resp.json())\n            .then(resp => history.push(`/ui/sequence/${resp.gameId}`));\n    }\n\n    function handleCreateGame() {\n        let game = { name, numPlayers, numTeams, adminUser: userId };\n        fetch(`${SOCKET_SERVER_URL}api/sequence/game`, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n            body: JSON.stringify({ game }),\n        })\n            .then(resp => resp.json())\n            .then(resp => history.push(`/ui/sequence/game/${resp.gameId}`));\n    }\n\n    function handleNameChange(e) {\n        setName(e.target.value);\n    }\n\n    function handleTeamsChange(e) {\n        setNumTeams(e.target.value);\n    }\n\n    function handlePlayerChange(e) {\n        setNumPlayers(e.target.value);\n    }\n\n    return userSet() ? (\n        <Container>\n            <Row>\n                <Col>\n                    <label>Name</label>\n                </Col>\n                <Col>\n                    <input type=\"text\" placeholder=\"Name\" value={name} onChange={handleNameChange} />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <label>Number of players</label>\n                </Col>\n                <Col>\n                    <input type=\"text\" placeholder=\"Players\" value={numPlayers} onChange={handlePlayerChange} />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <label>Number of Teams</label>\n                </Col>\n                <Col>\n                    <input type=\"text\" placeholder=\"Teams\" value={numTeams} onChange={handleTeamsChange} />\n                </Col>\n            </Row>\n            <Row>\n                <Button onClick={handleCreateGame}>Create Game</Button>\n            </Row>\n        </Container>\n    ) : (\n        /*\n        <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"numPlayers\">\n                <Form.Label>Number of Players</Form.Label>\n                <Form.Control type=\"number\" placeholder=\"2\" />\n            </Form.Group>\n            <fieldset>\n                <Form.Group as={Row}>\n                    <Form.Label as=\"legend\" column sm={2}>\n                        Number of teams\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Check type=\"radio\" label=\"2\" name=\"numTeams\" id=\"numPlayers2\" />\n                        <Form.Check type=\"radio\" label=\"3\" name=\"numTeams\" id=\"numPlayers3\" />\n                    </Col>\n                </Form.Group>\n            </fieldset>\n            <Button type=\"submit\" className=\"mb-2\">\n                Create\n            </Button>\n        </Form>\n*/\n        <Login />\n    );\n};\n\nexport default Home;\n","import { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_CHAT_MESSAGE_EVENT = 'newChatMessage'; // Name of the event\nconst SOCKET_SERVER_URL = process.env.REACT_APP_SOCKET_SERVER_URL;\n// const SOCKET_SERVER_URL = 'https://evening-lowlands-19146.herokuapp.com/';\n// const SOCKET_SERVER_URL = \"http://localhost:8081\";\n// const SOCKET_SERVER_URL = \"http://localhost:5000\";\nconst MSG_HEADERS = {\n    NEW_GAME: 'gameCreated',\n    PLAY_CONFIRM: 'playConfirm',\n    // PLAYER_RECONNECTED: 'player_reconnected',\n    START_GAME: 'start',\n    PLAYER_INACTIVE: 'playerInactive',\n    LOGGED_IN: 'userLoggedIn',\n    CHAT_MESSAGE: 'newChatMessage',\n    BROADCAST_PLAYER_JOINED: 'playerJoined',\n    BROADCAST_PLAYER_REJOINED: 'playerRejoined',\n    BROADCAST_PLAYER_DROPPED: 'playerDropped',\n    BROADCAST_PLACE_COIN: 'placeCoin',\n    BROADCAST_REMOVE_COIN: 'removeCoin',\n    BROADCAST_REPLACE_CARD: 'replaceCard',\n};\n\nconst useChat = () => {\n    const email = window.localStorage.getItem('userEmail');\n    window.localStorage.getItem('userId');\n    window.localStorage.getItem('userName');\n    const [messages, setMessages] = useState([]); // Sent and received messages\n    const socketRef = useRef();\n\n    useEffect(() => {\n        // Creates a WebSocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query: { playerId: email },\n        });\n        Object.values(MSG_HEADERS).forEach(header => {\n            socketRef.current.on(header, message => {\n                const incomingMessage = {\n                    body: JSON.stringify({ msg: header, body: JSON.stringify(message) }),\n                    ownedByCurrentUser: false,\n                };\n                setMessages(messages => [...messages, incomingMessage]);\n            });\n        });\n        // Listens for incoming messages\n        socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n            const incomingMessage = {\n                ...message,\n                ownedByCurrentUser: message.senderId === socketRef.current.id,\n            };\n            setMessages(messages => [...messages, incomingMessage]);\n        });\n        socketRef.current.on('error', message => {\n            const incomingMessage = {\n                body: JSON.stringify(message),\n                ownedByCurrentUser: true,\n            };\n            setMessages(messages => [...messages, incomingMessage]);\n        });\n        // Destroys the socket reference\n        // when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, []);\n\n    // Sends a message to the server that\n    // forwards it to all users in the same room\n    const sendMessage = message => {\n        let tokenIndex = message.indexOf(' ');\n        socketRef.current.emit(message.substr(0, tokenIndex), JSON.parse(message.substr(tokenIndex + 1)));\n    };\n\n    return { messages, setMessages, sendMessage };\n};\n\nexport default useChat;\n","import React from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"./useChat\";\n\nconst ChatRoom = (props) => {\n    // const { gameId, playerId } = props.match.params; // Gets gameId from URL\n    const { messages, setMessages, sendMessage } = useChat(); // Creates a websocket and manages messaging\n    const [newMessage, setNewMessage] = React.useState(\"\"); // Message to be sent\n\n    const handleNewMessageChange = (event) => {\n        setNewMessage(event.target.value);\n    };\n\n    const handleSendMessage = () => {\n        sendMessage(newMessage);\n        const msg = {\n            body: newMessage,\n            ownedByCurrentUser: true,\n        };\n        setMessages((messages) => [...messages, msg]);\n        setNewMessage(\"\");\n    };\n\n    return (\n        <div className=\"chat-room-container\">\n            <h1 className=\"room-name\">Room</h1>\n            <div className=\"messages-container\">\n                <ol className=\"messages-list\">\n                    {messages.map((message, i) => (\n                        <li\n                            key={i}\n                            className={`message-item ${\n                                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n                            }`}\n                        >\n                            {message.body}\n                        </li>\n                    ))}\n                </ol>\n            </div>\n            <textarea\n                value={newMessage}\n                onChange={handleNewMessageChange}\n                placeholder=\"Write message...\"\n                className=\"new-message-input-field\"\n            />\n            <button onClick={handleSendMessage} className=\"send-message-button\">\n                Send\n            </button>\n        </div>\n    );\n};\n\nexport default ChatRoom;","import { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport _ from 'lodash';\nimport { useAlert } from 'react-alert';\n\nconst SOCKET_SERVER_URL = process.env.REACT_APP_SOCKET_SERVER_URL;\n// const SOCKET_SERVER_URL = 'https://evening-lowlands-19146.herokuapp.com/';\n// const SOCKET_SERVER_URL = 'http://localhost:8081/';\n// const SOCKET_SERVER_URL = 'http://localhost:5000/';\n\nconst MSG_HEADERS = {\n    NEW_GAME: 'gameCreated',\n    PLAY_CONFIRM: 'playConfirm',\n    PLAYER_RECONNECTED: 'player_reconnected',\n    START_GAME: 'start',\n    PLAYER_INACTIVE: 'playerInactive',\n    LOGGED_IN: 'userLoggedIn',\n    CHAT_MESSAGE: 'newChatMessage',\n    BROADCAST_WIN_ACTION: 'broadcastWin',\n    PLAYER_WIN_ACTION: 'playerWin',\n    BROADCAST_PLAYER_INACTIVE: 'playerInactive',\n    BROADCAST_PLAYER_JOINED: 'playerJoined',\n    BROADCAST_PLAYER_REJOINED: 'playerRejoined',\n    BROADCAST_PLAYER_DROPPED: 'playerDropped',\n    BROADCAST_COIN_ACTION: 'coinAction',\n    BROADCAST_PLACE_COIN: 'placeCoin',\n    BROADCAST_REMOVE_COIN: 'removeCoin',\n    BROADCAST_REPLACE_CARD: 'replaceCard',\n};\n\nfunction initializeBoard() {\n    const board = [];\n    for (let i = 0; i < 10; i++) {\n        board[i] = [];\n    }\n    let suits = ['S', 'D', 'C', 'H'];\n    let suiteNumbers = ['2', '3', '4', '5', '6', '7', '8', '9', '0', 'Q', 'K', 'A'];\n    let values = {\n        S: suiteNumbers,\n        D: suiteNumbers,\n        C: [...suiteNumbers].reverse(),\n        H: [...suiteNumbers].reverse(),\n    };\n    let sIndex = 0;\n    let vIndex = 0;\n    let rIndex = 0;\n    let cIndex = 1;\n    let direction = 0;\n    let loop = 0;\n    _.set(board, [0, 0], '*');\n    _.set(board, [9, 9], '*');\n    _.set(board, [0, 9], '*');\n    _.set(board, [9, 0], '*');\n    for (let i = 0; i < 100; i++) {\n        if (!board[rIndex][cIndex]) {\n            let s = suits[sIndex];\n            let v = values[s][vIndex];\n            if (vIndex === 11) {\n                sIndex = (sIndex + 1) % 4;\n            }\n            vIndex = (vIndex + 1) % 12;\n            _.set(board, [rIndex, cIndex], `${v}${s}`);\n        }\n        switch (direction) {\n            case 0:\n                if (cIndex === 9 - loop) {\n                    rIndex++;\n                    direction++;\n                } else {\n                    cIndex++;\n                }\n                break;\n            case 1:\n                if (rIndex === 9 - loop) {\n                    direction++;\n                    cIndex--;\n                } else {\n                    rIndex++;\n                }\n                break;\n            case 2:\n                if (cIndex === loop) {\n                    rIndex--;\n                    direction++;\n                    loop++;\n                } else {\n                    cIndex--;\n                }\n                break;\n            case 3:\n                if (rIndex === loop) {\n                    cIndex++;\n                    direction = 0;\n                } else {\n                    rIndex--;\n                }\n                break;\n        }\n    }\n    return board;\n}\nconst useSequence = (gameId, setGameComplete, setPlayersModalOpen) => {\n    const playerId = window.localStorage.getItem('userEmail');\n    const userName = window.localStorage.getItem('userName');\n    const alert = useAlert();\n    const globalBoard = initializeBoard();\n    const [position, setPosition] = useState(-1);\n    const [turn, setTurn] = useState(0);\n    const [gameState, setGameState] = useState('created');\n    const [board, setBoard] = useState([]);\n    const [hand, setHand] = useState([]);\n    const [numPlayers, setNumPlayers] = useState(0);\n    const [numTeams, setNumTeams] = useState(0);\n    const [players, setPlayers] = useState([]);\n    const [history, setHistory] = useState([]);\n    const [errors, setErrorsList] = useState([]);\n    const [gameLoaded, setGameLoaded] = useState(false);\n    const socketRef = useRef();\n\n    function setErrors(errs) {\n        setErrorsList(errs);\n        setTimeout(() => {\n            setErrorsList((errors || []).filter(({ time }) => Date.now() - time < 3000));\n        }, 3000);\n    }\n\n    function setCompleteBoard(board) {\n        if (board.winner !== undefined) {\n            setGameComplete(true);\n        }\n        setBoard({ globalBoard, board });\n    }\n\n    function confirmPlayAction({ hand, turn }) {\n        setHand(hand);\n    }\n\n    function setPlayersList(players) {\n        setPlayers(players);\n        let currentPosition = players.findIndex(p => p.playerId === playerId);\n        if (currentPosition !== -1) {\n            setPosition(currentPosition);\n        }\n    }\n\n    function playerUpdate({ players, history, turn }) {\n        if (turn !== undefined) {\n            setTurn(turn);\n        }\n        setHistory(history);\n        setPlayersList(players);\n    }\n\n    function coinAction({ turn, history, board }) {\n        setTurn(turn);\n        setCompleteBoard(board);\n        setHistory(history);\n    }\n\n    function startGameAcknowledge({ board, hand, players, history, turn }) {\n        setCompleteBoard(board);\n        // setHistory(history);\n        setHand(hand);\n        setTurn(turn);\n        setPlayersList(players);\n    }\n\n    useEffect(() => {\n        fetch(`${SOCKET_SERVER_URL}api/sequence/game/${gameId}`)\n            .then(resp => resp.json())\n            .then(resp => {\n                // setGame(_.omit(resp, 'board'));\n                setTurn(turn);\n                setGameState(resp.state);\n                setPlayersList(resp.players);\n                setNumPlayers(resp.numPlayers);\n                setNumTeams(resp.numTeams);\n                setCompleteBoard(resp.board);\n                if (position < 0 || resp.state === 'created') {\n                    setPlayersModalOpen(true);\n                }\n                setGameLoaded(true);\n                let playerJoined = false;\n                if (resp.players.find(p => p.playerId === playerId)) {\n                    playerJoined = true;\n                }\n                if (!playerJoined) {\n                } else {\n                    createSocket();\n                    // Destroys the socket reference\n                    // when the connection is closed\n                }\n            });\n        return () => {\n            if (socketRef) {\n                socketRef.current.disconnect();\n            }\n        };\n    }, [gameId]);\n    function createSocket() {\n        console.log('Creating socket')\n        if(socketRef.current){\n            console.log('Socket already created')\n            return ;\n        }\n        // Creates a WebSocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query: { playerId, gameId, userName },\n        });\n        // Listens for incoming messages\n        socketRef.current.on(MSG_HEADERS.START_GAME, startGameAcknowledge);\n        socketRef.current.on(MSG_HEADERS.PLAYER_RECONNECTED, startGameAcknowledge);\n        socketRef.current.on(MSG_HEADERS.PLAY_CONFIRM, confirmPlayAction);\n        socketRef.current.on(MSG_HEADERS.BROADCAST_COIN_ACTION, coinAction);\n        socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_JOINED, playerUpdate);\n        socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_REJOINED, playerUpdate);\n        socketRef.current.on(MSG_HEADERS.BROADCAST_PLAYER_INACTIVE, playerUpdate);\n\n        socketRef.current.on('error', ({ err }) => {\n            console.log(`Error: ${err}`);\n            alert.show(err);\n        });\n    }\n\n    // Sends a message to the server that\n    // forwards it to all users in the same room\n    const joinGame = position => {\n        if (!socketRef.current) {\n            createSocket();\n        }\n        socketRef.current.emit('join', { position, gameId, playerId });\n    };\n    const startGame = () => {\n        socketRef.current.emit('start', { gameId });\n    };\n    const placeAction = (card, position) => {\n        socketRef.current.emit('play', { card, position });\n    };\n    const replaceCard = card => {\n        socketRef.current.emit('play', { card, action: 'replace' });\n    };\n    return {\n        board,\n        gameState,\n        hand,\n        setHand,\n        players,\n        errors,\n        setErrors,\n        gameLoaded,\n        history,\n        turn,\n        position,\n        placeAction,\n        replaceCard,\n        joinGame,\n        startGame,\n        numTeams,\n        numPlayers,\n    };\n};\n\nexport default useSequence;\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Container, Row, Col, Card, Navbar, Nav, Spinner, Button, Modal } from 'react-bootstrap';\nimport { useAlert } from 'react-alert';\n// import Modal from 'react-modal';\n\nimport './Sequence.css';\nimport useSequence from './useSequence';\nimport useLogin from './useLogin';\nimport Login from './Login';\nconst TEAM_COINS = { 0: 'red.png', 1: 'green.png', 2: 'blue.png' };\nfunction getImagePath(index) {\n    let imagePath = `${index}.png`;\n    // For ad blocker\n    if (imagePath === 'AD.png') imagePath = 'aceDiamonds.png';\n    if (imagePath === '*.png') imagePath = 'back2x.png';\n    return imagePath;\n}\nconst SINGLE_EYED_JACKS = ['JS', 'JH'];\nconst DOUBLE_EYED_JACKS = ['JD', 'JC'];\nfunction isDoubleEyedJack(cardIndex) {\n    return DOUBLE_EYED_JACKS.includes(cardIndex);\n}\nfunction isSingleEyedJack(cardIndex) {\n    return SINGLE_EYED_JACKS.includes(cardIndex);\n}\n\nconst Sequence = props => {\n    const { userName } = useLogin();\n    const alert = useAlert();\n    const [gameComplete, setGameComplete] = React.useState(false);\n    const [cardToUse, setCardToUse] = React.useState(''); // Message to be sent\n    const [selectedCardIndex, setSelectedCardIndex] = React.useState(''); // Message to be sent\n    const [isReplaceCardModalOpen, setIsReplaceModalOpen] = React.useState(false);\n    const [isPlayersModalOpen, setPlayersModalOpen] = React.useState(false);\n    const { gameId } = props.match.params; // Gets roomId from URL\n    const {\n        board,\n        gameLoaded,\n        hand,\n        setHand,\n        players,\n        position,\n        history,\n        startGame,\n        joinGame,\n        turn,\n        placeAction,\n        numTeams,\n        numPlayers,\n        gameState,\n        replaceCard,\n    } = useSequence(gameId, setGameComplete, setPlayersModalOpen); // Creates a websocket and manages messaging\n\n    const handleHandCardSelected = (card, i) => {\n        setCardToUse(card);\n        setSelectedCardIndex(i);\n        if (board.board.selectedByIndex[card] > 1) {\n            setIsReplaceModalOpen(true);\n        }\n        setHand(hand);\n    };\n    function getTeamCoin(board, i, j) {\n        let coin = board && board.selectedPositions[`${i}-${j}`];\n        return coin !== undefined && coin !== '*' && process.env.PUBLIC_URL + '/img/coins/' + TEAM_COINS[coin];\n    }\n\n    const handlePlaceCard = (i, j, card) => {\n        if (gameState !== 'inProgress') {\n            alert.show(`Game not started`);\n            return;\n        }\n        if (position !== turn) {\n            console.log(`Not your turn`);\n            alert.show(`Not your turn`);\n            return;\n        }\n        if (!cardToUse) {\n            console.log(`No Card Selected`);\n            alert.show(`No Card Selected`);\n            return;\n        }\n        if (!isSingleEyedJack(cardToUse) && !isDoubleEyedJack(cardToUse) && cardToUse !== card) {\n            console.log(`Not the selected card`);\n            alert.show(`Not the selected card`);\n            return;\n        }\n        placeAction(cardToUse, `${i}-${j}`);\n        setCardToUse(null);\n    };\n\n    function getBoardToDraw() {\n        return board.globalBoard || [];\n    }\n\n    function cardSelected(i) {\n        return selectedCardIndex === i;\n    }\n    function closeReplaceCardModal() {\n        setIsReplaceModalOpen(false);\n    }\n    function replaceSelected() {\n        replaceCard(cardToUse);\n        setIsReplaceModalOpen(false);\n    }\n\n    function gameStart() {\n        startGame();\n        setPlayersModalOpen(false);\n    }\n\n    function getGameComponent() {\n        return gameLoaded ? (\n            <Container>\n                <Modal show={gameComplete}>\n                    <Modal.Header>Game over</Modal.Header>\n                    <Modal.Body>Team {_.get(board, 'board.winner')} won</Modal.Body>\n                </Modal>\n                <Modal show={isPlayersModalOpen} onHide={() => setPlayersModalOpen(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Players</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <Row>\n                                <Col>Position</Col>\n                                <Col>Team Number</Col>\n                                <Col>Name</Col>\n                            </Row>\n                            {_.keys(Array(numPlayers)).map((row, i) => (\n                                <Row>\n                                    <Col>{i}</Col>\n                                    <Col>{i % numTeams}</Col>\n                                    <Col>\n                                        {players[i] && !players[i].inactive ? (\n                                            <span>{players[i].name}</span>\n                                        ) : position < 0 ? (\n                                            <Button onClick={() => joinGame(i)}>Join</Button>\n                                        ) : (\n                                            <span>Waiting...</span>\n                                        )}\n                                    </Col>\n                                </Row>\n                            ))}\n                            {gameState === 'created' && !players.find(x => !x || x.inactive) ? (\n                                <Row>\n                                    <Button onClick={() => startGame()}>Start</Button>\n                                </Row>\n                            ) : (\n                                ''\n                            )}\n                        </Container>\n                    </Modal.Body>\n                </Modal>\n                <Modal show={isReplaceCardModalOpen} onHide={closeReplaceCardModal}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Players</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Container>\n                            <Row>\n                                <Col>\n                                    <Button variant=\"primary\" onClick={replaceSelected}>\n                                        yes\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    <Button variant=\"secondary\" onClick={closeReplaceCardModal}>\n                                        no\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Modal.Body>\n                </Modal>\n                <Row>\n                    <Col>\n                        <span>Turn: {turn}</span>\n                    </Col>\n                    <Col>\n                        <span>Selected: {cardToUse}</span>\n                    </Col>\n                    <Col>\n                        <Button onClick={() => setPlayersModalOpen(true)}>\n                            {position < 0 ? <span>Join</span> : <span>Position: {position}</span>}\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Container fluid className=\"container\">\n                        {getBoardToDraw().map((row, i) => (\n                            <Row key={`row${i}`}>\n                                {row.map((card, j) => {\n                                    const coin = getTeamCoin(board.board, i, j);\n                                    return (\n                                        <Col>\n                                            <Card onClick={() => handlePlaceCard(i, j, card)}>\n                                                <Card.Img\n                                                    alt=\"Card\"\n                                                    img-border-primary\n                                                    src={`https://evening-lowlands-19146.herokuapp.com/img/${getImagePath(card)}`}\n                                                />\n                                                {coin && <img src={coin} className=\"coin img-responsive\" />}\n                                            </Card>\n                                        </Col>\n                                    );\n                                })}\n                            </Row>\n                        ))}\n                    </Container>\n                </Row>\n                <Row>\n                    <Container fluid>\n                        <Row style={{ justifyContent: 'center', padding: '20px' }}>\n                            {(hand || []).map((card, i) => (\n                                <Col>\n                                    <img\n                                        alt=\"Card1\"\n                                        height=\"100vh\"\n                                        src={`https://evening-lowlands-19146.herokuapp.com/img/${getImagePath(card)}`}\n                                        className={cardSelected(i) ? 'border border-primary' : ''}\n                                        onClick={() => handleHandCardSelected(card, i)}\n                                    />\n                                </Col>\n                            ))}\n                        </Row>\n                    </Container>\n                </Row>\n            </Container>\n        ) : (\n            <Spinner animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        );\n    }\n\n    return (\n        <Container>\n            {/*\n            <Row>\n                <Navbar bg=\"light\" fixed=\"top\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Sequence</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n\n                    <Login />\n                </Navbar>\n            </Row>\n*/}\n            <Row>{userName ? getGameComponent() : <Login />}</Row>\n        </Container>\n    );\n};\n\nexport default Sequence;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './index.css';\nimport Home from './Home';\nimport CreateGame from './CreateGame';\nimport ChatRoom from './ChatRoom';\nimport Sequence from './SequenceV2';\nimport { getStore } from './utils';\nimport { ActionCreators } from './redux/reducers/user';\nimport React from 'react';\n\nclass App extends React.Component {\n    componentDidMount() {\n        const user = getStore('user');\n        if (user) {\n            this.props.dispatch(ActionCreators.login(user));\n        }\n    }\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/ui/sequencerooms\" component={Home} />\n                    <Route exact path=\"/ui/sequence/game/:gameId\" component={Sequence} />\n                    <Route exact path=\"/ui/sequence/create\" component={CreateGame} />\n                    <Route exact path=\"/ui/chat\" component={ChatRoom} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","export const setStore = (name, content) => {\n    if (!name) return\n    if (typeof content !== 'string') {\n        content = JSON.stringify(content)\n    }\n    return window.localStorage.setItem(name, content)\n}\n\n/**\n * Get localStorage\n */\nexport const getStore = (name) => {\n    if (!name) return\n    return JSON.parse(window.localStorage.getItem(name))\n}\n\n/**\n * Clear localStorage\n */\nexport const removeItem = (name) => {\n    if (!name) return\n    return window.localStorage.removeItem(name)\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Types } from '../actions/actionTypes';\n\nconst initialState = {\n    profile: {\n        id: '',\n        name: '',\n        email: '',\n    },\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case Types.LOGIN:\n            console.log('login', action.payload.user);\n            return {\n                ...state,\n                user: action.payload.user,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport userReducer from '../reducers/user-reducer';\n\nconst rootReducer = combineReducers({\n    user: userReducer\n});\n\nconst configureStore = () => {\n    return createStore(\n        rootReducer,\n        compose(applyMiddleware(thunk))\n    );\n};\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport configureStore from './redux/store';\n\nconst store = configureStore();\n\nconst options = {\n    // you can also just use 'bottom center'\n    position: positions.BOTTOM_CENTER,\n    timeout: 5000,\n    offset: '30px',\n    // you can also just use 'scale'\n    transition: transitions.SCALE,\n};\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\nlet root = (\n    <AlertProvider template={AlertTemplate} {...options}>\n        <React.StrictMode>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </React.StrictMode>\n    </AlertProvider>\n);\nReactDOM.render(root, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}